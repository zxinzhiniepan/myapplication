<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="30">
    <!--一些共用属性-->
    <properties>
        <!-- 日志保存路径 -->
        <!--将日志输出到tomcat中的logs目录中-->
        <property name = "file.savepath">../logs/o2o</property>
        <!--<property name = "file.savepath">${web:contextPath}/logs</property>-->
        <property name = "console.pattern">%highlight{[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%thread] [%-5p] - %l - %msg%n}{STYLE=Logback}</property>
        <property name = "file.pattern">[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%t] [%-5p] - %l - %m%n</property>
    </properties>

    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${console.pattern}"/>
        </console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用.
        append=true则保留记录，反之不保留-->
        <File name="LiveLog" fileName="${file.savepath}/livelog.log" append="true">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%thread] [%-5p] - %l - %msg%n"/>
        </File>

        <!-- 这个会打印出所有的debug-月份建立的文件夹下面并进行压缩，作为存档-->
        <!--    <RollingFile name="RollingFileInfo" fileName="${sys:user.home}/logs/info.log"
                         filePattern="${sys:user.home}/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">  -->
        <RollingFile name="RollingFileDebug" fileName="${file.savepath}/debug.log"
            filePattern="${file.savepath}/$${date:yyyy-MM}/debug-%d{yyyy-MM-dd}-%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${file.pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

        <!-- 这个会打印出所有的info-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${file.savepath}/info.log"
            filePattern="${file.savepath}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${file.pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

        <!-- 这个会打印出所有的error-月份建立的文件夹下面并进行压缩，作为存档-->
        <!-- <RollingFile name="RollingFileError" fileName="${sys:user.home}/logs/error.log"
              filePattern="${sys:user.home}/logs/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log"> -->
        <RollingFile name="RollingFileError" fileName="${file.savepath}/error.log"
            filePattern="${file.savepath}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${file.pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>
    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="WARN"></logger>
        <logger name="org.mybatis" level="DEBUG"></logger>
        <logger name="com.xinzhiniepan.o2o" level="DEBUG"/>
        <root level="all">
            <appender-ref ref="Console"/>
            <appender-ref ref="LiveLog"/>
            <appender-ref ref="RollingFileDebug"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </loggers>
</configuration>
